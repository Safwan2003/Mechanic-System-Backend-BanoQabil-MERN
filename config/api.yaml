swagger: "2.0"
info:
  title: MECHANIC SYSTEM 
  version: "1.0.0"
  description: Swagger UI Docs for Project (Mechanic System)

  servers:
    -url: "http://localhost:5000/api-docs/"
    description: This is Local Server
host: localhost:5000
basePath: /
schemes:
  - http
  - https

securityDefinitions:
  login_a_user:
    type: apiKey
    name: authorization
    in: header


              # USER AUTHORIZATION STARTS


paths:
  # USERS

  # Post api to create new user response => web token
  /api/auth/userregister:
    post:
      summary: Create A New User
      tags:
        - User Authorization
      description: Create a new user with a valid name, email, password, and avatar.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: userName
          type: string
          description: User's full name.
        - in: formData
          name: email
          type: string
          format: email
          description: User's email address.
        - in: formData
          name: password
          type: string
          description: User's password (at least 6 characters).
        - in: formData
          name: phoneNumber
          type: string
          description: User's phoneNumber.
        - in: formData
          name: avatar
          type: file
          description: User's avatar image.
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                example: Json web token
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  # Post api to login a user response => web token
  /api/auth/userlogin:
    post:
      summary: Login A User
      security: []
      tags:
        - User Authorization
      description: API to validate and login a user with jwt
      produce:
        - applicaition/json
      cosume:
        - applicaition/json
      parameters:
        - in: body
          name: Login User
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address.
              password:
                type: string
                description: User's password.
      responses:
        200:
          description: User Logged In
          schemes:
            type: object
            example: Json web token
        400:
          description: Bad Request
        500:
          description: Internal Server Error


# Get api to get the user loggedin => web token
  /api/auth/user-login:
    get:
      summary: Get the currently logged-in user.
      tags:
        - User Authorization
      description: Retrieve the user details for the currently authenticated user.
      security:
        - login_a_user: []
      responses:
        200:
          description: User details retrieved successfully.
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              email:
                type: string
              # Add other user properties here excluding password
        401:
          description: Unauthorized. User not logged in or invalid token.
        500:
          description: Internal Server Error. Something went wrong on the server.
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: JWT token to authenticate the user.
          required: true
          schema:
            type: string
            format: jwt


                      # USER AUTHORIZATION END
  

                      # MECHANIC AUTHORIZATION STARTS

  paths:
  # MECHANICS

  # Post api to create new mechanic response => web token
  /api/auth/mechanicregister:
    post:
      summary: Create A New Mechanic
      tags:
        - Mechanic Authorization
      description: Create a new mechanic with a valid CNIC, name, phone number, location, password, avatar, and utility image.
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: CNIC
          type: string
          description: Mechanic's valid CNIC number.
        - in: formData
          name: name
          type: string
          description: Mechanic's full name.
        - in: formData
          name: phoneNumber
          type: string
          description: Mechanic's phone number.
        - in: formData
          name: location
          type: string
          enum: ['Karachi South', 'Karachi East', 'Karachi West', 'Karachi Central', 'Karachi North', 'Korangi']
          description: Mechanic's location.
        - in: formData
          name: service
          type: string
          description: Mechanic's service.
        - in: formData
          name: password
          type: string
          description: Mechanic's password (at least 6 characters).
        - in: formData
          name: avatar
          type: file
          description: Mechanic's avatar image.
        - in: formData
          name: utilityImage
          type: file
          description: Mechanic's utility image.
      responses:
        '200':
          description: Mechanic created successfully.
          content:
            application/json:
              schema:
                type: object
                example: Json web token
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  
  
  # Post api to login a Mechanic response => web token
  /api/auth/mechaniclogin:
    post:
      summary: Login A Mechanic
      security: []
      tags:
        - Mechanic Authorization
      description: API to validate and login a mechanic with jwt
      produce:
        - applicaition/json
      cosume:
        - applicaition/json
      parameters:
        - in: body
          name: Login Mechanic
          schema:
            type: object
            properties:
              phoneNumber:
                type: string
                description: Mechanic's phone Number.
              password:
                type: string
                description: Mechanic's password.
      responses:
        200:
          description: Mechanic Logged In
          schemes:
            type: object
            example: Json web token
        400:
          description: Bad Request
        500:
          description: Internal Server Error


  
  
  # Get api to get the mechanic logged in
  /api/auth/mechanic-login:
    get:
      summary: Get the currently logged-in mechanic.
      tags:
        - Mechanic Authorization
      description: Retrieve the mechanic details for the currently authenticated user.
      security:
        - login_a_user: []
      responses:
        200:
          description: Mechanic details retrieved successfully.
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              email:
                type: string
              # Add other user properties here excluding password
        401:
          description: Unauthorized. Mechanic not logged in or invalid token.
        500:
          description: Internal Server Error. Something went wrong on the server.
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: JWT token to authenticate the mechanic.
          required: true
          schema:
            type: string
            format: jwt

  


# Get api to get the mechanic details by their id
  /api/auth/mechaniclogin/{mechanicid}:
    get:
      summary: Get mechanic by ID
      tags:
        - Mechanic Authorization
      description: Retrieve a mechanic's details by their ID.
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: mechanicid
          required: true
          description: ID of the mechanic to retrieve
          schema:
            type: string
      responses:
        200:
          description: Mechanic details retrieved successfully
          schema:
            $ref: '#/definitions/Mechanic'
        404:
          description: Mechanic not found
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Error message
                example: Mechanic not found
        500:
          description: Internal Server Error



                    # MECHANIC AUTHORIZATION END
  
  
                    # ADMIN AUTHORIZATION STARTS
  
  paths:
  # ADMIN

  # Post api to create new admin response => web token
  /api/auth/adminregister:
    post:
      summary: Create A New Admin
      tags:
        - Admin Authorization
      description: Create a new admin with a valid  adminName, phoneNumber,email and password.
      produce:
        - applicaition/json
      cosume:
        - applicaition/json
      parameters:
        - in: body
          name: Create Admin
          description: Enter Valid Information.
          schema:
            type: object
            properties:
              adminName:
                type: string
                description: Admin's full name.
              phoneNumber:
                type: string
                description: Admin's Phone Number.
              email:
                type: string
                description: Admin's email address
                format: email  
              password:
                type: string
                description: Admin's password (at least 4 characters).
      responses:
        200:
          description: Admin created successfully.
          schemes:
            type: object
            example: Json web token
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  
  
  
  # Post api to login Admin response => web token
  /api/auth/adminlogin:
    post:
      summary: Login A Admin
      security: []
      tags:
        - Admin Authorization
      description: API to validate and login a admin with jwt
      produce:
        - applicaition/json
      cosume:
        - applicaition/json
      parameters:
        - in: body
          name: Login Admin
          schema:
            type: object
            properties:
              email:
                type: string
                description: Admin's email address.
                format: email
              password:
                type: string
                description: Admin's password.
      responses:
        200:
          description: Admin Logged In
          schemes:
            type: object
            example: Json web token
        400:
          description: Bad Request
        500:
          description: Internal Server Error


  
  
  # Get api to get teh admin logeed in
  /api/auth/admin-login:
    get:
      summary: Get the currently logged-in admin.
      tags:
        - Admin Authorization
      description: Retrieve the admin details for the currently authenticated admin.
      security:
        - login_a_user: []
      responses:
        200:
          description: Admin details retrieved successfully.
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              email:
                type: string
              
        401:
          description: Unauthorized. Admin not logged in or invalid token.
        500:
          description: Internal Server Error. Something went wrong on the server.
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: JWT token to authenticate the admin.
          required: true
          schema:
            type: string
            format: jwt
    

                  # ADMIN AUTHORIZATION END

                  # ADMIN ACCESS STARTS

  # Admin Acess

  paths:
  /api/admin/mechanicprofile:
    get:
      summary: Retrieve all mechanics
      tags:
        - Admin Access 
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all mechanics
          schema:
            type: array
            items:
              $ref: '#/definitions/Mechanic'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'

  


# Put api to activate the mechanic profile

  
  /api/admin/mechanicprofile/{mechanicid}/activate:
    put:
      summary: Activate mechanic profile
      tags:
        - Admin Access  
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: mechanicid
          required: true
          description: ID of the mechanic whose profile is to be activated
          type: string
        - in: header
          name: Authorization
          description: JWT token to authenticate the admin
          required: true
          type: string
      responses:
        200:
          description: Mechanic profile activated successfully
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Confirmation message
                example: Mechanic profile activated
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          description: Mechanic profile not found
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Error message
                example: Mechanic profile not found
        500:
          description: Internal Server Error
  
  
  
  
  
  # Put api to deactivate the mechanic profile
  /api/admin/mechanicprofile/{mechanicid}/deactivate:
    put:
      summary: Deactivate mechanic profile
      tags:
        - Admin Access 
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: mechanicid
          required: true
          description: ID of the mechanic whose profile is to be deactivated
          type: string
        - in: header
          name: Authorization
          description: JWT token to authenticate the admin
          required: true
          type: string
      responses:
        200:
          description: Mechanic profile deactivated successfully
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Confirmation message
                example: Mechanic profile deactivated
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          description: Mechanic profile not found
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Error message
                example: Mechanic profile not found
        500:
          $ref: '#/responses/InternalServerError'
  
  
  
  
  
  # Service Verification
  # Put api to accepted the services
  
  /api/admin/serviceverification/{mechanicId}/approve:
    put:
      summary: Approve mechanic services
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: mechanicId
          required: true
          description: ID of the mechanic whose services are to be approved
          type: string
        - in: header
          name: Authorization
          description: JWT token to authenticate the admin
          required: true
          type: string
      responses:
        200:
          description: Mechanic services approved successfully
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Confirmation message
                example: Mechanic services are approved
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          description: Mechanic not found
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Error message
                example: Mechanic not found
        500:
          $ref: '#/responses/InternalServerError'
  
  
  
  
  
  
  # Put api to rejected the services
  /api/admin/serviceverification/{mechanicId}/reject:
    put:
      summary: Reject mechanic services
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: mechanicId
          required: true
          description: ID of the mechanic whose services are to be rejected
          type: string
        - in: header
          name: Authorization
          description: JWT token to authenticate the admin
          required: true
          type: string
      responses:
        200:
          description: Mechanic services rejected successfully
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Confirmation message
                example: Mechanic services are rejected
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          description: Mechanic not found
          schema:
            type: object
            properties:
              msg:
                type: string
                description: Error message
                example: Mechanic not found
        500:
          $ref: '#/responses/InternalServerError'
    

    # Get ap to get the all users
  
  /api/admin/userprofile:
    get:
      summary: Retrieve all user profiles
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all user profiles
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'




# Get api to get the all orders

  
  /api/admin/orders:
    get:
      summary: Retrieve all orders
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'

    
    
    
    #to get all completed orders
  
  /api/admin/orders/completed:
    get:
      summary: Retrieve all completed orders
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all completed orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'

    
# to get all ongoing orders
  
  /api/admin/orders/ongoing:
    get:
      summary: Retrieve all ongoing orders
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all ongoing orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'

  

# to get all cancel orders
  
  /api/admin/orders/cancel:
    get:
      summary: Retrieve all canceled orders
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all canceled orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'

  # to get all waited orders 
  
  /api/admin/orders/waiting:
    get:
      summary: Retrieve all orders waiting
      tags:
        - Admin Access
      security:
        - login_a_user: []
      parameters:
        - in: header
          name: Authorization
          description: Admin's authentication token
          required: true
          type: string
      responses:
        200:
          description: A list of all orders waiting
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  

                        # ADMIN ACCESS ENDS

                        # MECHANIC ACCESS STARTS



  # Mechanic Access

  #to get orders
  paths:
  /api/mechanic/orders:
    get:
      summary: Retrieve orders assigned to the mechanic
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      responses:
        200:
          description: A list of orders assigned to the mechanic
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  #to get order history
  
  /api/mechanic/order-history:
    get:
      summary: Retrieve order history of the mechanic
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      responses:
        200:
          description: A list of order history for the mechanic
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  
    #to get mechanic profile
  
  /api/mechanic/profile:
    get:
      summary: Retrieve mechanic profile
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      responses:
        200:
          description: Mechanic profile retrieved successfully
          schema:
            $ref: '#/definitions/Mechanic'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  
  #api to approve order
  
  /api/mechanic/approveorder/{orderid}:
    put:
      summary: Approve an order
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: orderid
          required: true
          description: ID of the order to be approved
          type: string
      responses:
        200:
          description: Order approved successfully
          schema:
            $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  
  
  
  
  # api to cancel order
  
  /api/mechanic/cancelorder/{orderid}:
    put:
      summary: Cancel an order
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: orderid
          required: true
          description: ID of the order to be cancelled
          type: string
      responses:
        200:
          description: Order cancelled successfully
          schema:
            $ref: '#/definitions/Order'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  
  
  # Mechanic Access
  /api/mechanic/completedorder/{orderid}:
    put:
      summary: Mark an order as completed
      tags:
        - Mechanic Access
      security:
        - login_a_user: []
      parameters:
        - in: path
          name: orderid
          required: true
          description: ID of the order to be marked as completed
          type: string
        - in: body
          name: Service Description
          description: Description of the service provided for the order
          required: true
          schema:
            type: object
            properties:
              serviceDescription:
                type: string
                description: Description of the service provided
      responses:
        200:
          description: Order marked as completed successfully
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Bad request. Check the request payload.
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  
                      # MECHANIC ACCESS END
  
                      # User ACCESS Starts
  
  paths:
  /api/user/:
    get:
      tags:
        - User Access
      summary: Get all mechanics
      description: |
        Retrieves a list of mechanics based on location and needed service.
        If a mechanic is logged in, only their details will be returned.
      parameters:
        - name: location
          in: query
          description: Location of the mechanic
          required: true
          type: string
        - name: neededService
          in: query
          description: Service needed by the user
          required: true
          type: string
      responses:
        200:
          description: A list of mechanics matching the criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Mechanic'
        400:
          description: Bad request. Please provide both location and neededService parameters.
        404:
          description: No mechanics found matching the criteria
        500:
          description: Server error

  
  /api/user/profile:
    get:
      summary: Retrieve usre profile
      tags:
        - User Access
      security:
        - login_a_user: []
      responses:
        200:
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/User'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  
  





  
  /api/user/makeOrder:
    post:
      summary: "Create a new Order"
      tags:
        - "User Access"
      description: "API to create a new Order."
      parameters:
        - in: header
          name: auth-token
          description: "Authentication token for user authentication."
          required: true
          type: string
          format: jwt
        - in: "body"
          name: "OrderDetails"
          description: "Order details for creating a new order."
          required: true
          schema:
            type: "object"
            properties:
              mechanicId:
                type: "string"
                description: "ID of the mechanic associated with the order."
              Service:
                type: "string"
                description: "Type of service for the order."
              Location:
                type: "string"
                description: "Location for the order."
              status:
                type: "string"
                description: "Status of the order."
      security:
        - login_a_user: []
      responses:
        '201':
          description: "Order created successfully."
          schema:
            $ref: "#/definitions/Order"
        '400':
          description: "Bad request. Check the request payload."
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
        '401':
          description: "Unauthorized. User authentication failed."
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
        '500':
          description: "Internal server error."
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
definitions:
  Order:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "The unique identifier for the order."
      user:
        type: "string"
        description: "The ID of the user who created the order."
      mechanicId:
        type: "string"
        description: "The ID of the mechanic associated with the order."
      Service:
        type: "string"
        description: "The type of service for the order."
      Location:
        type: "string"
        description: "The location for the order."
      status:
        type: "string"
        description: "The status of the order."


# Get api to see the user order history 
  /api/user/order-history:
    get:
      summary: Retrieve Order History
      tags:
        - User Access
      security:
        - login_a_user: []
      responses:
        200:
          description: Order history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized Error
        500:
          description: Internal Server Error

                          # User ACCESS End 



                            #Feedback Starts
# User Feedbacks
# Put api to submit the feedback by the user
  paths:
  /api/user/feedBack/{id}:
    put:
      summary: Submit Feedback for Mechanic
      tags:
        - Feedback
      description: Submit feedback for a specific mechanic after completing an order.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the mechanic
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  description: Rating for the mechanic (between 1 and 5)
                comment:
                  type: string
                  description: Feedback comment
      responses:
        '200':
          description: Feedback submitted successfully
        '400':
          description: Bad Request
        '404':
          description: Mechanic not found
        '500':
          description: Internal Server Error







# Get api to get the feedback

  /api/user/feedback/{id}:
    get:
      summary: Get Feedback for Mechanic
      tags:
        - Feedback
      description: Retrieve feedback for a specific mechanic.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the mechanic
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedbacks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
        '404':
          description: Mechanic not found
        '500':
          description: Internal Server Error

components:
  schemas:
    Feedback:
      type: object
      properties:
        _id:
          type: string
          description: ID of the feedback
        mechanicId:
          type: string
          description: ID of the mechanic
        comment:
          type: string
          description: Feedback comment
        rating:
          type: number
          description: Feedback rating
  
  
  
  
  
                                # Feedback End
  
  
  # # Inventory

  # # Post api to create a product response => product object
  # /api/inventory/addproducts:
  #   post:
  #     summary: Create a new product in the inventory.
  #     tags:
  #       - Inventory
  #     description: API to create new product
  #     required: true
  #     security:
  #       - login_a_user: []
  #     parameters:
  #       - in: header
  #         name: auth-token
  #         type: string
  #         required: true
  #       - in: body
  #         name: Create Product
  #         schema:
  #           type: object
  #           properties:
  #             productName:
  #               type: string
  #             buyingPrice:
  #               type: string
  #             sellingPrice:
  #               type: string
  #             supplierName:
  #               type: string
  #             category:
  #               type: string
  #     responses:
  #       201:
  #        description: Product created successfully.
  #       400:
  #        description: Bad request. Check the request payload.

  # # Get api to get all products response => array of products
  # /api/inventory/getallproducts:
  #   get:
  #     summary: Get all products in the inventory.
  #     tags:
  #       - Inventory
  #     description: API to get all notes
  #     security:
  #       - login_a_user: []
  #     parameters:
  #       - in: header
  #         name: auth-token
  #         type: string
  #         required: true
  #     responses:
  #       200:
  #         description: Notes Found
  #         schemes:
  #           type: object
  #           example: Json web token
  #       400:
  #         description: Bad Request
  #       401:
  #         description: Unauthorized
  #       500:
  #         description: Internal Server Error

  # # Put api to update a product reponse => product object
  # /api/inventory/updateproduct/{id}:
  #   put:
  #     summary: Update A Product
  #     tags:
  #       - Inventory
  #     description: API to update a product
  #     security:
  #       - login_a_user: []
  #     parameters:
  #       - in: body
  #         name: Update Product
  #         schema:
  #           type: object
  #           properties:
  #             productName:
  #               type: string
  #             buyingPrice:
  #               type: string
  #             sellingPrice:
  #               type: string
  #             supplierName:
  #               type: string
  #             category:
  #               type: string
  #       - in: header
  #         name: auth-token
  #         type: string
  #         required: true
  #         description: Enter Token
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: Enter product Id

  #     requestBody:
  #       required: true
  #     responses:
  #       200:
  #         description: Product updated successfully.
  #          schemes:
  #           type: object
  #           example: Json web token
  #       404:
  #         description: Product not found.
  #       400:
  #         description: Bad request. Check the request payload.

  # # Delete api to delete a product response => product object
  # /api/inventory/deleteproduct/{id}:
  #   delete:
  #     summary: Delete A Product
  #     tags:
  #       - Inventory
  #     description: API to delete a product
  #     # security:
  #     #   - login_a_user: []
  #     parameters:
  #       - in: header
  #         name: auth-token
  #         type: string
  #         required: true
  #         description: Enter Token
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: Enter Product Id
  #     responses:
  #       200:
  #         description: Product Deleted
  #         schemes:
  #           type: object
  #           example: Json web token
  #       400:
  #         description: Bad Request
  #       404:
  #         description: Product not found.
